# 3.3[20]: В настольной игре Скрабл (Scrabble) каждая буква имеет определенную ценность.
# В случае с английским алфавитом очки распределяются так:
# A, E, I, O, U, L, N, S, T, R – 1 очко;
# D, G – 2 очка;
# B, C, M, P – 3 очка;
# F, H, V, W, Y – 4 очка;
# K – 5 очков;
# J, X – 8 очков;
# Q, Z – 10 очков.

# А русские буквы оцениваются так:
# А, В, Е, И, Н, О, Р, С, Т – 1 очко;
# Д, К, Л, М, П, У – 2 очка;
# Б, Г, Ё, Ь, Я – 3 очка;
# Й, Ы – 4 очка;
# Ж, З, Х, Ц, Ч – 5 очков;
# Ш, Э, Ю – 8 очков;
# Ф, Щ, Ъ – 10 очков.

# Напишите программу, которая вычисляет стоимость введенного пользователем слова. Будем считать, 
# что на вход подается только одно слово, которое содержит либо только английские, либо только 
# русские буквы и заранее известно какой алфавит надо использовать.

# Примеры/Тесты:
# Input:   ноутбук
# Output:  12

# Input:   notebook
# Output:  14
# (*) Примечание.
# Подумайте о том какие структуры данных здесь наиболее удобно использовать, чтобы просто проверять 
# в какую группу попадает буква, а также просто накапливать сумму очков.

let_1l = ['A', 'E', 'I', 'O', 'U', 'L', 'N', 'S', 'T', 'R']  # 1 очко;
let_2l = ['D', 'G']                                          # 2 очка;
let_3l = ['B', 'C', 'M', 'P']                                # 3 очка;
let_4l = ['F', 'H', 'V', 'W', 'Y']                           # 4 очка;
let_5l = ['K']                                               # 5 очков;
let_8l = ['J', 'X']                                          # 8 очков;
let_10l = ['Q', 'Z']                                         # 10 очков.


word_cost = 0
word = "notebook"
for char in word.upper():
    for cost, chars_set in cost_eng.items():
        if char in chars_set:
            word_cost += cost
            break

print(word_cost)


# С 41-й минуты!!! Семинар 4